generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URI")
  shadowDatabaseUrl = env("DATABASE_URI")
}

model Item {
  id              Int           @id @default(autoincrement())
  ownerId         Int
  collectionId    Int?
  tokenId         String        @unique
  title           String
  description     String        @db.VarChar(250)
  images          String[]
  video           String
  acceptedBid     Float
  createdAt       DateTime      @default(now())
  openForBid      Boolean
  price           Float
  published       Boolean
  publishedAt     DateTime?
  updatedAt       DateTime      @updatedAt
  owner           User          @relation(fields: [ownerId], references: [id])
  bids            Bid[]
  collection      Collection?   @relation(fields: [collectionId], references: [id])
  ratings         ItemRating[]
  Rating          Rating[]
}

model Bid {
  id        Int      @id @default(autoincrement())
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  itemId    Int
  bidderId  Int
  bidder    User     @relation(fields: [bidderId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])
}

model CollectionType {
  id              Int          @id @default(autoincrement())
  name            String       @unique
  minItems        Int
  maxItems        Int
  typeId          String       @unique @default(uuid())
  maxContributors Int
  minContributors Int
  collections     Collection[]
}

model User {
  id              Int              @id @default(autoincrement())
  walletAddress   String           @unique
  email           String           @unique
  password        String
  verified        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime?        @updatedAt
  profileId       Int?
  bids            Bid[]
  collections     Collection[]
  items           Item[]
  notifications   Notification[]
  profile         Profile?
  ratingsGiven    Rating[]
  contributions   UserCollection[]
  followers       UserFollower[]   @relation("follower")
  following       UserFollower[]   @relation("following")
  ratingsRecieved UserRating[]
}

model Collection {
  id               Int                @id @default(autoincrement())
  title            String
  description      String             @db.VarChar(250)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  authorId         Int
  images           String[]
  videos           String[]
  collectionTypeId Int
  tokenId          String             @unique
  author           User               @relation(fields: [authorId], references: [id])
  type             CollectionType     @relation(fields: [collectionTypeId], references: [id])
  ratings          CollectionRating[]
  items            Item[]
  contributors     UserCollection[]
}

model UserCollection {
  id           Int        @id @default(autoincrement())
  collectionId Int
  userId       Int
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model UserFollower {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  updatedAt   DateTime @updatedAt
  follower    User     @relation("follower", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])
}

model ItemRating {
  id       Int      @id @default(autoincrement())
  itemId   Int
  upatedAt DateTime @updatedAt
  ratingId Int
  item     Item     @relation(fields: [itemId], references: [id])
  rating   Rating   @relation(fields: [ratingId], references: [id])
}

model UserRating {
  id        Int      @id @default(autoincrement())
  userId    Int
  updatedAt DateTime @updatedAt
  ratingId  Int
  rating    Rating   @relation(fields: [ratingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model CollectionRating {
  id           Int        @id @default(autoincrement())
  collectionId Int
  updatedAt    DateTime   @updatedAt
  ratingId     Int
  collection   Collection @relation(fields: [collectionId], references: [id])
  rating       Rating     @relation(fields: [ratingId], references: [id])
}

model Rating {
  id                  Int                 @id @default(autoincrement())
  rating              Int
  raterId             Int
  itemId              Int
  createdAt           DateTime            @default(now())
  rater               User                @relation(fields: [raterId], references: [id])
  Item                Item                @relation(fields: [itemId], references: [id])
  collectionRatings   CollectionRating[]
  userRatings         UserRating[]
  itemRatings         ItemRating[]
}

model Profile {
  name        String
  rating      Int?
  avatar      String
  dob         DateTime?
  userId      Int       @unique
  id          String    @id @default(uuid())
  phoneNumber String
  bio         String    @db.VarChar(250)
  user        User      @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    Int
  title     String
  content   String
  status    Boolean
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum Gender {
  MALE
  FEMALE
  OTHERS
  NON_BINARY
}

enum EntityType {
  User
  Single
  Collection
}
