generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URI")
  shadowDatabaseUrl = env("DATABASE_URI")
}

model Item {
  id              Int           @id @default(autoincrement())
  ownerId         Int
  collectionId    Int?
  tokenId         String        @unique
  title           String
  description     String        @db.VarChar(250)
  images          String[]
  video           String
  acceptedBid     Float
  createdAt       DateTime      @default(now())
  openForBid      Boolean
  price           Float
  published       Boolean
  publishedAt     DateTime?
  updatedAt       DateTime      @updatedAt
  owner           User          @relation(fields: [ownerId], references: [id])
  bids            Bid[]
  collection      Collection?   @relation(fields: [collectionId], references: [id])
  ratings         ItemRating[]
  Rating          Rating[]
}

model Bid {
  id          Int         @id @default(autoincrement())
  amount      Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  itemId      Int
  bidderId    Int
  bidder      User        @relation(fields: [bidderId], references: [id])
  item        Item        @relation(fields: [itemId], references: [id])
}

model CollectionType {
  id                Int          @id @default(autoincrement())
  name              String       @unique
  minContributors   Int
  maxContributors   Int
  minItems          Int
  maxItems          Int
  typeId            String       @unique @default(uuid())
  collections       Collection[]
}

model User {
  id                  Int                   @id @default(autoincrement())
  walletAddress       String                @unique
  email               String                @unique
  password            String
  verified            Boolean               @default(false)
  profileId           Int?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?             @updatedAt
  bids                Bid[]
  items               Item[]
  notifications       Notification[]
  profile             Profile?
  contributions       UserCollection[]
  collections         Collection[]
  ratingsGiven        Rating[]
  ratingsRecieved     UserRating[]
  followers           UserFollower[]        @relation(name: "follower")
  following           UserFollower[]        @relation(name: "following")
}

model Collection {
  id                Int               @id @default(autoincrement())
  title             String
  tokenId           String            @unique
  collectionTypeId  Int
  description       String            @db.VarChar(250)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime?         @updatedAt
  authorId          Int
  images            String[]
  videos            String[]
  type              CollectionType    @relation(fields: [collectionTypeId], references: [id])
  author            User              @relation(fields: [authorId], references: [id])
  contributors      UserCollection[]
  items             Item[]
  ratings           CollectionRating[]
}

model UserCollection {
  id            Int             @id @default(autoincrement())
  collectionId  Int
  userId        Int
  updatedAt     DateTime        @updatedAt
  collection    Collection      @relation(fields: [collectionId], references: [id])
  user          User            @relation(fields: [userId], references: [id])
}

model UserFollower {
  id            Int             @id @default(autoincrement())
  followerId    Int
  followingId   Int
  updatedAt     DateTime        @updatedAt
  follower      User            @relation(name: "follower", fields: [followerId], references: [id])
  following     User            @relation(name: "following", fields: [followingId], references: [id])
}

model ItemRating {
  id          Int           @id @default(autoincrement())
  itemId      Int
  ratingId    Int
  upatedAt    DateTime      @updatedAt
  item        Item          @relation(fields: [itemId], references: [id])
  rating      Rating        @relation(fields: [ratingId], references: [id])
}

model UserRating {
  id            Int         @id @default(autoincrement())
  userId        Int
  ratingId      Int
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  rating        Rating      @relation(fields: [ratingId], references: [id])
}

model CollectionRating {
  id            Int           @id @default(autoincrement())
  collectionId  Int
  ratingId      Int
  updatedAt     DateTime      @updatedAt
  collection    Collection    @relation(fields: [collectionId], references: [id])
  rating        Rating        @relation(fields: [ratingId], references: [id])
}

model Rating {
  id                  Int                 @id @default(autoincrement())
  rating              Int
  raterId             Int
  itemId              Int
  createdAt           DateTime            @default(now())
  rater               User                @relation(fields: [raterId], references: [id])
  Item                Item                @relation(fields: [itemId], references: [id])
  collectionRatings   CollectionRating[]
  userRatings         UserRating[]
  itemRatings         ItemRating[]
}

model Profile {
  name        String
  rating      Int?
  avatar      String
  dob         DateTime?
  userId      Int       @unique
  id          String    @id @default(uuid())
  phoneNumber String
  bio         String    @db.VarChar(250)
  user        User      @relation(fields: [userId], references: [id])
}

model Notification {
  id          String    @id @default(uuid())
  userId      Int
  title       String
  content     String
  status      Boolean
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
}

enum Gender {
  MALE
  FEMALE
  OTHERS
  NON_BINARY
}

enum EntityType {
  User
  Single
  Collection
}
