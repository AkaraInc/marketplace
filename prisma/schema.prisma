generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URI")
  shadowDatabaseUrl = env("DATABASE_URI")
}

model Bid {
  id        Int      @id @default(autoincrement())
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  itemId    Int
  bidderId  Int
  user      User     @relation(fields: [bidderId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])
}

model Purchase {
  id              Int      @id @default(autoincrement())
  amount          Float
  createdAt       DateTime @default(now())
  transactionId   String   @unique
  itemId          Int
  userId          Int
  isAuction       Boolean  @default(false)
  itemPrevOwnerId Int?
  inCollectionId  Boolean  @default(false)
  item            Item     @relation(fields: [itemId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model CollectionRating {
  id           Int        @id @default(autoincrement())
  collectionId Int
  ratingId     Int
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id])
  rating       Rating     @relation(fields: [ratingId], references: [id])
}

model Auction {
  id        Int     @id @default(autoincrement())
  open      Boolean @default(false)
  openPrice Float
  itemId    Int     @unique
  endTime   String
  startTime String
  item      Item    @relation(fields: [itemId], references: [id])
}

model Item {
  id                Int            @id @default(autoincrement())
  ownerId           Int
  collectionId      Int?
  tokenId           String         @unique
  title             String
  description       String?        @db.VarChar(10000)
  images            String[]
  video             String?
  acceptedBid       Float?
  createdAt         DateTime       @default(now())
  openForBid        Boolean
  price             Float
  published         Boolean
  publishedAt       DateTime?
  updatedAt         DateTime       @updatedAt
  step              Int?
  royalties         Int?
  terms             Boolean?
  category          Category?      @default(ART)
  collectionOnChain Boolean?       @default(true)
  authorId          Int?
  collection        Collection?    @relation(fields: [collectionId], references: [id])
  owner             User           @relation(fields: [ownerId], references: [id])
  auction           Auction?
  bids              Bid[]
  ratings           ItemRating[]
  likes             Like[]
  Notification      Notification[]
  purchases         Purchase[]
}

model ItemRating {
  id        Int      @id @default(autoincrement())
  itemId    Int
  updatedAt DateTime @updatedAt
  rating    Int
  item      Item     @relation(fields: [itemId], references: [id])
}

model Notification {
  title        String
  content      String?
  createdAt    DateTime    @default(now())
  id           Int         @id @default(autoincrement())
  action       String
  itemId       Int?
  itemType     String?
  read         Boolean     @default(false)
  receiverId   Int
  senderId     Int?
  description  String?     @db.VarChar(10000)
  collectionId Int?
  collection   Collection? @relation(fields: [collectionId], references: [id])
  item         Item?       @relation(fields: [itemId], references: [id])
  receiver     User        @relation("receiver", fields: [receiverId], references: [id])
  sender       User?       @relation("sender", fields: [senderId], references: [id])
}

model Profile {
  name        String?
  rating      Int?
  avatar      String?
  dob         DateTime?
  userId      Int       @unique
  id          Int       @id @default(autoincrement())
  phoneNumber String?
  bio         String?   @db.VarChar(250)
  gender      String?
  facebook    String?
  instagram   String?
  twitter     String?
  website     String?
  user        User      @relation(fields: [userId], references: [id])
}

model Rating {
  id                Int                @id @default(autoincrement())
  rating            Int
  raterId           Int
  itemId            Int
  createdAt         DateTime           @default(now())
  user              User               @relation(fields: [raterId], references: [id])
  collectionRatings CollectionRating[]
  userRatings       UserRating[]
}

model Collection {
  id            Int                @id @default(autoincrement())
  title         String
  tokenId       String             @unique
  description   String             @db.VarChar(10000)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  authorId      Int
  images        String[]
  videos        String[]
  status        CollectionStatus?  @default(DRAFT)
  visible       Boolean            @default(false)
  lunchTime     String?
  revenue       Int?
  type          CollectionTypes    @default(ORDINARY)
  worth         Float?
  author        User               @relation(fields: [authorId], references: [id])
  beneficiaries Beneficiary[]
  ratings       CollectionRating[]
  contributors  Contributor[]
  draftItems    DraftItems[]
  items         Item[]
  likes         Like[]
  Notification  Notification[]
}

model DraftItems {
  id           Int         @id @default(autoincrement())
  ownerId      Int
  collectionId Int?
  title        String
  description  String?     @db.VarChar(10000)
  images       String[]
  video        String?
  createdAt    DateTime    @default(now())
  price        Float
  itemId       Int
  Collection   Collection? @relation(fields: [collectionId], references: [id])
}

model User {
  id                    Int            @id @default(autoincrement())
  walletAddress         String         @unique
  email                 String         @unique
  username              String         @unique
  password              String
  verified              Boolean        @default(false)
  profileId             Int?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  beneficiaries         Beneficiary[]
  bids                  Bid[]
  collections           Collection[]
  contributors          Contributor[]
  followers             Follows[]      @relation("Follows_followerIdToUser")
  following             Follows[]      @relation("Follows_followingIdToUser")
  items                 Item[]
  likes                 Like[]
  receivedNotifications Notification[] @relation("receiver")
  sentNotifications     Notification[] @relation("sender")
  profile               Profile?
  purchases             Purchase[]
  ratings               Rating[]
  userRatings           UserRating[]
}

model Follows {
  id          Int  @unique @default(autoincrement())
  followerId  Int
  followingId Int
  followers   User @relation("Follows_followerIdToUser", fields: [followerId], references: [id])
  following   User @relation("Follows_followingIdToUser", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model UserRating {
  id        Int      @id @default(autoincrement())
  userId    Int
  ratingId  Int
  updatedAt DateTime @updatedAt
  rating    Rating   @relation(fields: [ratingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Like {
  id           Int         @id @default(autoincrement())
  itemId       Int?
  userId       Int?
  collectionId Int?
  collection   Collection? @relation(fields: [collectionId], references: [id])
  item         Item?       @relation(fields: [itemId], references: [id])
  user         User?       @relation(fields: [userId], references: [id])
}

model Contributor {
  id           Int               @id @default(autoincrement())
  collectionId Int
  userId       Int
  updatedAt    DateTime          @updatedAt
  confirmation ContributorStatus @default(PENDING)
  percentage   Int               @default(0)
  collection   Collection        @relation(fields: [collectionId], references: [id])
  user         User              @relation(fields: [userId], references: [id])
}

model Beneficiary {
  id            Int        @id @default(autoincrement())
  collectionId  Int
  userId        Int?
  percentage    Int        @default(0)
  description   String?
  name          String?
  email         String
  walletAddress String
  Collection    Collection @relation(fields: [collectionId], references: [id])
  user          User?      @relation(fields: [userId], references: [id])
}

enum CollectionTypes {
  ORDINARY
  COLLABORATORS
  FUNDRAISING
  LOCKSHARED
}

enum Category {
  ART
  GAME
  PHOTOGRAPHY
  MUSIC
  VIDEO
}

enum EntityType {
  User
  Single
  Collection
}

enum Gender {
  MALE
  FEMALE
  OTHERS
  NON_BINARY
}

enum CollectionStatus {
  DRAFT
  READY
  PENDING
  VERIFIED
  PUBLISHED
}

enum ContributorStatus {
  PENDING
  ACCEPTED
  REJECTED
}
