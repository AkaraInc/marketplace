generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URI")
  shadowDatabaseUrl = env("DATABASE_URI")
}

model Bid {
  id        Int      @id @default(autoincrement())
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  itemId    Int
  bidderId  Int
  user      User     @relation(fields: [bidderId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])
}

model Purchase {
  id            Int      @id @default(autoincrement())
  amount        Float
  createdAt     DateTime @default(now())
  transactionId String   @unique
  itemId        Int
  userId        Int
  item          Item     @relation(fields: [itemId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model CollectionRating {
  id           Int        @id @default(autoincrement())
  collectionId Int
  ratingId     Int
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id])
  rating       Rating     @relation(fields: [ratingId], references: [id])
}

model CollectionType {
  id              Int          @id @default(autoincrement())
  name            String       @unique
  minContributors Int
  maxContributors Int
  minItems        Int
  maxItems        Int
  typeId          String       @unique
  collection      Collection[]
}

model Auction {
  id        Int     @id @default(autoincrement())
  open      Boolean @default(false)
  startTime String
  endTime   String
  openPrice Float
  itemId    Int     @unique
  item      Item    @relation(fields: [itemId], references: [id])
}

model Item {
  id           Int            @id @default(autoincrement())
  ownerId      Int
  collectionId Int?
  tokenId      String         @unique
  title        String
  description  String         @db.VarChar(250)
  images       String[]
  video        String?
  acceptedBid  Float?
  createdAt    DateTime       @default(now())
  openForBid   Boolean
  price        Float
  published    Boolean
  publishedAt  DateTime?
  updatedAt    DateTime       @updatedAt
  collection   Collection?    @relation(fields: [collectionId], references: [id])
  owner        User           @relation(fields: [ownerId], references: [id])
  auction      Auction?
  bids         Bid[]
  ratings      ItemRating[]
  likes        Like[]
  Notification Notification[]
  purchases    Purchase[]
}

model ItemRating {
  id        Int      @id @default(autoincrement())
  itemId    Int
  updatedAt DateTime @updatedAt
  rating    Int
  item      Item     @relation(fields: [itemId], references: [id])
}

model Notification {
  title      String
  content    String?
  createdAt  DateTime @default(now())
  id         Int      @id @default(autoincrement())
  action     String
  itemId     Int?
  itemType   String?
  read       Boolean  @default(false)
  receiverId Int
  senderId   Int?
  item       Item?    @relation(fields: [itemId], references: [id])
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  sender     User?    @relation("sender", fields: [senderId], references: [id])
}

model Profile {
  name        String
  rating      Int?
  avatar      String
  dob         DateTime?
  userId      Int       @unique
  id          Int       @id @default(autoincrement())
  phoneNumber String
  bio         String    @db.VarChar(250)
  user        User      @relation(fields: [userId], references: [id])
}

model Rating {
  id                Int                @id @default(autoincrement())
  rating            Int
  raterId           Int
  itemId            Int
  createdAt         DateTime           @default(now())
  user              User               @relation(fields: [raterId], references: [id])
  collectionRatings CollectionRating[]
  userRatings       UserRating[]
}

model Collection {
  id               Int                @id @default(autoincrement())
  title            String
  tokenId          String             @unique
  collectionTypeId Int
  description      String             @db.VarChar(250)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  authorId         Int
  images           String[]
  videos           String[]
  status           CollectionStatus   @default(CREATED)
  visible          Boolean            @default(false)
  author           User               @relation(fields: [authorId], references: [id])
  type             CollectionType     @relation(fields: [collectionTypeId], references: [id])
  ratings          CollectionRating[]
  items            Item[]
  likes            Like[]
  userCollections  UserCollection[]
}

model User {
  id                    Int              @id @default(autoincrement())
  walletAddress         String           @unique
  email                 String           @unique
  password              String
  verified              Boolean          @default(false)
  profileId             Int?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  bids                  Bid[]
  collections           Collection[]
  items                 Item[]
  likes                 Like[]
  receivedNotifications Notification[]   @relation("receiver")
  sentNotifications     Notification[]   @relation("sender")
  profile               Profile?
  purchases             Purchase[]
  ratings               Rating[]
  userCollections       UserCollection[]
  userFollowers         UserFollower[]   @relation("userFollowers")
  userFollowing         UserFollower[]   @relation("userFollowing")
  userRatings           UserRating[]
}

model UserCollection {
  id           Int        @id @default(autoincrement())
  collectionId Int
  userId       Int
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model UserFollower {
  id            Int      @id @default(autoincrement())
  followerId    Int
  followingId   Int
  updatedAt     DateTime @updatedAt
  userFollower  User     @relation("userFollowers", fields: [followerId], references: [id])
  userFollowing User     @relation("userFollowing", fields: [followingId], references: [id])
}

model UserRating {
  id        Int      @id @default(autoincrement())
  userId    Int
  ratingId  Int
  updatedAt DateTime @updatedAt
  rating    Rating   @relation(fields: [ratingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Like {
  id           Int         @id @default(autoincrement())
  itemId       Int?
  userId       Int?
  collectionId Int?
  Collection   Collection? @relation(fields: [collectionId], references: [id])
  Item         Item?       @relation(fields: [itemId], references: [id])
  User         User?       @relation(fields: [userId], references: [id])
}

enum EntityType {
  User
  Single
  Collection
}

enum Gender {
  MALE
  FEMALE
  OTHERS
  NON_BINARY
}

enum CollectionStatus {
  CREATED
  VERIFIED
  READY
  PUBLISHED
}
