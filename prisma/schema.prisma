generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URI")
  shadowDatabaseUrl = env("DATABASE_URI")
}

model Item {
  owner       String
  tokenId     String    @unique
  description String    @db.VarChar(250)
  images      String[]
  video       String
  acceptedBid Float
  created     DateTime  @default(now())
  openForBid  Boolean
  price       Float
  published   Boolean
  publishedAt DateTime?
  updated     DateTime  @updatedAt
  bids        Bid?
}

model Bid {
  bidId       String   @id
  amount      Float
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  item        Item     @relation(fields: [bidId], references: [tokenId])
  bidders     User[]
}

model CollectionType {
  name       String      @unique
  minOwners  Int
  maxOwners  Int
  minItems   Int
  maxItems   Int
  typeId     String      @unique @default(uuid())
  collection Collection?
}

model User {
  address    String      @id @unique
  email      String      @unique
  password   String
  profileId  Int?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  bidId      String?
  verified   Boolean     @default(false)
  bid        Bid?        @relation(fields: [bidId], references: [bidId])
  collection Collection?
  profile    Profile?
  rating     Rating?
}

model Collection {
  name             String
  typeId           String         @id @default(uuid())
  collectiontypeId String         @unique
  items            String[]
  description      String
  owners           String
  created          DateTime       @default(now())
  upated           DateTime       @updatedAt
  userId           String         @unique
  images           String[]
  videos           String[]
  type             CollectionType @relation(fields: [collectiontypeId], references: [name])
  users            User           @relation(fields: [userId], references: [address])
}

model Rating {
  entityId   String     @id
  entityType EntityType @default(User)
  userId     String     @unique
  user       User       @relation(fields: [userId], references: [address])
}

model Profile {
  name        String
  avatar      String
  dob         String
  userId      String @unique
  id          String @id @default(uuid())
  phoneNumber Int
  bio         String
  user        User   @relation(fields: [userId], references: [address])
}

enum Gender {
  MALE
  FEMALE
  OTHERS
  NON_BINARY
}

enum EntityType {
  User
  Single
  Collection
}
