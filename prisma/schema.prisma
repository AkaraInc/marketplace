generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URI")
  shadowDatabaseUrl = env("DATABASE_URI")
}

model Item {
  id           Int          @id @default(autoincrement())
  ownerId      Int
  collectionId Int?
  tokenId      String       @unique
  title        String
  description  String       @db.VarChar(250)
  images       String[]
  video        String
  acceptedBid  Float
  createdAt    DateTime     @default(now())
  openForBid   Boolean
  price        Float
  published    Boolean
  publishedAt  DateTime?
  updatedAt    DateTime     @updatedAt
  collection   Collection?  @relation(fields: [collectionId], references: [id])
  owner        User         @relation(fields: [ownerId], references: [id])
  bids         Bid[]
  ratings      ItemRating[]
  Rating       Rating[]
}

model Bid {
  id        Int      @id @default(autoincrement())
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  itemId    Int
  bidderId  Int
  bidder    User     @relation(fields: [bidderId], references: [id])
  item      Item     @relation(fields: [itemId], references: [id])
}

model CollectionType {
  id              Int          @id @default(autoincrement())
  name            String       @unique
  minContributors Int
  maxContributors Int
  minItems        Int
  maxItems        Int
  typeId          String       @unique @default(uuid())
  collections     Collection[]
}

model User {
  id              Int              @id @default(autoincrement())
  walletAddress   String           @unique
  email           String           @unique
  password        String
  verified        Boolean          @default(false)
  profileId       Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  bids            Bid[]
  collections     Collection[]
  items           Item[]
  notifications   Notification[]
  profile         Profile?
  ratingsGiven    Rating[]
  contributions   UserCollection[]
  followers       UserFollower[]   @relation("follower")
  following       UserFollower[]   @relation("following")
  ratingsRecieved UserRating[]
}

model Collection {
  id               Int                @id @default(autoincrement())
  title            String
  tokenId          String             @unique
  collectionTypeId Int
  description      String             @db.VarChar(250)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  authorId         Int
  images           String[]
  videos           String[]
  author           User               @relation(fields: [authorId], references: [id])
  type             CollectionType     @relation(fields: [collectionTypeId], references: [id])
  ratings          CollectionRating[]
  items            Item[]
  contributors     UserCollection[]
}

model UserCollection {
  id           Int        @id @default(autoincrement())
  collectionId Int
  userId       Int
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model UserFollower {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  updatedAt   DateTime @updatedAt
  follower    User     @relation("follower", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])
}

model ItemRating {
  id        Int      @id @default(autoincrement())
  itemId    Int
  ratingId  Int
  updatedAt DateTime
  item      Item     @relation(fields: [itemId], references: [id])
  rating    Rating   @relation(fields: [ratingId], references: [id])
}

model UserRating {
  id        Int      @id @default(autoincrement())
  userId    Int
  ratingId  Int
  updatedAt DateTime @updatedAt
  rating    Rating   @relation(fields: [ratingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model CollectionRating {
  id           Int        @id @default(autoincrement())
  collectionId Int
  ratingId     Int
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id])
  rating       Rating     @relation(fields: [ratingId], references: [id])
}

model Rating {
  id                Int                @id @default(autoincrement())
  rating            Int
  raterId           Int
  itemId            Int
  createdAt         DateTime           @default(now())
  Item              Item               @relation(fields: [itemId], references: [id])
  rater             User               @relation(fields: [raterId], references: [id])
  collectionRatings CollectionRating[]
  itemRatings       ItemRating[]
  userRatings       UserRating[]
}

model Profile {
  name        String
  rating      Int?
  avatar      String
  dob         DateTime?
  userId      Int       @unique
  id          Int       @id @default(autoincrement())
  phoneNumber String
  bio         String    @db.VarChar(250)
  user        User      @relation(fields: [userId], references: [id])
}

model Notification {
  userId    Int
  title     String
  content   String
  status    Boolean
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
}

enum Gender {
  MALE
  FEMALE
  OTHERS
  NON_BINARY
}

enum EntityType {
  User
  Single
  Collection
}
