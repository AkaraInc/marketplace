generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URI")
  shadowDatabaseUrl = env("DATABASE_URI")
}

model Item {
  id          Int       @id @default(autoincrement())
  ownerId     Int
  tokenId     String    @unique
  title       String
  description String    @db.VarChar(250)
  images      String[]
  video       String
  acceptedBid Float
  created     DateTime  @default(now())
  openForBid  Boolean
  price       Float
  published   Boolean
  publishedAt DateTime?
  updated     DateTime  @updatedAt
  rating      Int?
  owner       User      @relation(fields: [ownerId], references: [id])
  bids        Bid[]
}

model Bid {
  id          Int      @id @default(autoincrement())
  amount      Float
  createdDate DateTime @default(now())
  updatedDate DateTime @updatedAt
  itemId      Int
  bidderId    Int
  bidder      User     @relation(fields: [bidderId], references: [id])
  item        Item     @relation(fields: [itemId], references: [id])
}

model CollectionType {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  minOwners   Int
  maxOwners   Int
  minItems    Int
  maxItems    Int
  typeId      String       @unique @default(uuid())
  collections Collection[]
}

model User {
  id            Int            @id @default(autoincrement())
  walletAddress String         @unique
  email         String         @unique
  password      String
  rating        Int?
  profileId     Int?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime?      @updatedAt
  verified      Boolean        @default(false)
  bids          Bid[]
  items         Item[]
  notifications Notification[]
  profile       Profile?
  collections   Collection[]
}

model Collection {
  id               Int            @id @default(autoincrement())
  title            String
  typeId           String         @unique
  collectiontypeId Int
  items            String[]
  description      String         @db.VarChar(250)
  created          DateTime       @default(now())
  upated           DateTime       @updatedAt
  authorId         Int
  images           String[]
  videos           String[]
  rating           Int?
  type             CollectionType @relation(fields: [collectiontypeId], references: [id])
  owners           User[]
}

model ItemRating {
  id      Int      @id @default(autoincrement())
  itemId  Int
  raterId Int
  created DateTime @default(now())
  upated  DateTime @updatedAt
}

model UserRating {
  id      Int      @id @default(autoincrement())
  userId  Int
  raterId Int
  created DateTime @default(now())
  upated  DateTime @updatedAt
}

model CollectionRating {
  id           Int      @id @default(autoincrement())
  collectionId Int
  raterId      Int
  created      DateTime @default(now())
  upated       DateTime @updatedAt
}

model Profile {
  name        String
  avatar      String
  dob         DateTime
  userId      Int      @unique
  id          String   @id @default(uuid())
  phoneNumber String
  bio         String   @db.VarChar(250)
  user        User     @relation(fields: [userId], references: [id])
}

model Notification {
  id      String   @id @default(uuid())
  userId  Int
  title   String
  content String
  status  Boolean
  created DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id])
}

enum Gender {
  MALE
  FEMALE
  OTHERS
  NON_BINARY
}

enum EntityType {
  User
  Single
  Collection
}
